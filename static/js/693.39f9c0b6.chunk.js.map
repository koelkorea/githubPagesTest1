{"version":3,"file":"static/js/693.39f9c0b6.chunk.js","mappings":"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","sources":["../node_modules/react-bootstrap/esm/Table.js","pages/Cart.js"],"sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Table = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  striped,\n  bordered,\n  borderless,\n  hover,\n  size,\n  variant,\n  responsive,\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  const classes = classNames(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-${typeof striped === 'string' ? `striped-${striped}` : 'striped'}`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);\n  const table = /*#__PURE__*/_jsx(\"table\", {\n    ...props,\n    className: classes,\n    ref: ref\n  });\n  if (responsive) {\n    let responsiveClass = `${decoratedBsPrefix}-responsive`;\n    if (typeof responsive === 'string') {\n      responsiveClass = `${responsiveClass}-${responsive}`;\n    }\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: responsiveClass,\n      children: table\n    });\n  }\n  return table;\n});\nexport default Table;","import Table from 'react-bootstrap/Table';\r\n\r\n// (설명) redux 라이브러리의 hooks인 핵심함수 useDispatch, useSelector를 사용할 수 있도록 모듈 import\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// (설명) store.js에서 분화한 모듈에서 만들어둔 전역 state함수 changeName, increaseAge 사용할 수 있도록 모듈 import\r\nimport { changeName, increaseAge } from \"./../storeModule/userSlice.js\";\r\n\r\n// (설명) store.js에서 만들어둔 전역 state함수 setCount를 사용할 수 있도록 모듈 import\r\nimport { setCount } from \"./../store.js\";\r\nimport { memo, useDeferredValue, useMemo, useState , useTransition} from 'react';\r\n\r\n// function MemoChild(){\r\n//     console.log('부모 Conponent인 Cart가 랜더링 되면? 자식인 MemoChild가 재렌더링 됨.. 근데 얘가 만약에 무거운 놈이면 어떻게하지?')\r\n//     return <div></div>\r\n// }\r\n\r\n// memo(무명 함수형 컴포넌트 내용)\r\n//  : 특정 component가 크고 무겁기에 부모로부터 받은 props 값이 변동되는 것을 제외하고, react의 재랜더링 조건을 회피하고 싶을 떄 사용하는 함수\r\n//    (= 조건부로 재랜더링 원칙이 적용된 특수한 component lifeCycle을 가졌다 보자)\r\n//     -> memo의 결과값은 let, const, var로 받으며, 그 변수명은 반드시 component명이 되어야 함\r\n\r\n//   # memo(무명 함수형 컴포넌트 내용)의 로직\r\n//      : 재랜더링 대상으로 들어간 컴포넌트 내용에 기존 props와 바뀐 props를 비교하는 연산이 추가로 진행되고, 그것이 다르면 재랜더링 진행함\r\n//        (= props가 크고 복잡하면 이거 자체로도 부담이 될 수도 있기에, 전가의 보도처럼 지르지 말고, 잘 판단해서 써야함)\r\n\r\n// (설명) 상단의 MemoChild 컴포넌트가 props변경시에만 재랜더링 될 수 있도록 memo() 함수를 통해 설정\r\nlet MemoChild = memo(function (){\r\n    console.log('부모 Conponent인 Cart가 랜더링 되면? 자식인 MemoChild가 재렌더링 됨.. 근데 얘가 만약에 무거운 놈이면 어떻게하지?');\r\n    console.log(' -> 정답 : props값이 변할 떄만 추가로 랜더링을 하게 하고, 그 외에는 시작시 1번만 랜더링을 하라고 \\n    (= 조건부 재랜더링이 적용된 특수한 component lifeCycle을 가졌다 보자)');\r\n    return <div></div>;\r\n});\r\n\r\n// (설명) useMemo() 함수를 설명하기 위한 복잡한 함수\r\nlet example = new Array(2000).fill(0);\r\n\r\nfunction Cart(){\r\n\r\n    // useSelector( (parameter명) => { return parameter명 } )\r\n    //  : redux 라이브라리의 함수로 만들어 둔 store를 가져와서, 그 안의 모든 state들을 담아두는 state객체 형식으로 반환해주는 역할하는 react hooks 함수의 일종 (= useContext()와 유사)\r\n    //    (= axios나 fetch를 통해 외부서버로 API 보내 담은 데이터와 개념이나 사용법이 유사하기에, return 부분을 parameter.원하는state명 방식으로 원하는 데이터만 취하는거도 가능)\r\n    //       -> (추측) tools로 오면서 react hooks의 추세에 맞춰 로직 및 API 사용법을 변형한 느낌\r\n\r\n    // (설명) Cart 컴포넌트에서 store.js의 state 전체를 받아서 사용할 수 있게, useSelector의 반환값을 저장한 변수 reduxStates\r\n    let reduxstates = useSelector( (state) => {\r\n        return state;\r\n    });\r\n\r\n    \r\n    // (설명) Cart 컴포넌트에서 store.js의 state 중 user라는 state만 받아서 사용할 수 있게, useSelector의 반환값을 저장한 변수 user\r\n    let user = useSelector( (state) => state.user );\r\n\r\n    // (숙제1 구현) Cart 컴포넌트에서 store.js의 state 중 cartdata라는 state만 받아서 사용할 수 있게, useSelector의 반환값을 저장한 변수 user\r\n    let cartdata = useSelector( (state) => state.cartdata );\r\n\r\n    // useDispatch(import한 전역 state함수명)\r\n    //  : store.js에 만들어 둔 전역 state함수명이 호출되도록, store.js에 요청을 보내는 redux 라이브라리의 react hooks 함수의 일종\r\n    //     -> 요청을 보내는거지.. 실제 함수의 실행은 store.js에서 해줌\r\n    let disPatch = useDispatch();\r\n\r\n    // useMemo( 무명함수, [state 및 props변수에 대한 배열요소])\r\n    //  : memo() 함수랑 비슷하게, compoenent로드와 동시에 parameter로 들어가 있는 코드(특정 component나 함수)를 특별한 이유 없으면 단! 1번만 수행하라는 의미의 react-hooks 중 하나\r\n    //    (= memo랑 비슷하게 주로 무거운 코드라, 재랜더링 할 때 반복수행되길 원지 않을 경우 사용)\r\n    //       -> [state 및 props변수에 대한 배열요소]를 채우면, memo() 함수와 유사하게 특정 state나 props의 값의 변화시에 따른 재랜더링 시에는 반복을 허가함\r\n    //          (= 해당 배열이 비어있다면... 재랜더링 때마다, 새로 실행..)\r\n\r\n    //   # useEffect()  VS  useMemo()\r\n    //      : (중요!) 코드의 실행시점이 구체적으로 차이가 있으며, 의미적으로도 차이가 있음\r\n    //         -> useEffect() : component들의 랜더링 이후 실행되는 '사이드이팩트'에 해당하는 내용들만 실행\r\n    //         -> useMemo()   : component들의 랜더링과 동시에 실행되는 코드로.. 부득이하게 시간을 오래잡아먹는 코드라 랜더링과 함께 실행되서 성능 향상을 위한 목적으로 사용\r\n\r\n\r\n    // (설명) 자식 컴포넌트인 MemoChild에 props를 전달하기 위한 목적으로 만들어진 state  \r\n    let [MemoChildState, setMemoChildState] = useState(0);\r\n\r\n    // useTransition( () => { component의 문제되는 실행코드들 } ) 함수\r\n    //  : (react18 에서 등장) rendering이 오래 걸리는 component의 주범이 되는 코드에 대해, 그 실행 순서를 나중으로 밀어두는 재배치를 통해, 전반적인 유저들의 웹페이지 체감속도를 빠르게 해주는 react-hooks 중 하나\r\n    //    (= lazy import와 유사하며, 대충 component의 코드 단위로 써먹는 노동 쪼개고 미루기 정도로 알아두면 되겠다..)\r\n\r\n    //   # useTransition() 함수 사용법\r\n    //      1. 구조분해 문법을 이용해서, useTransition()의 결과인 isPending이란 멤버변수와 startTransition( 무명함수 parameter )라는 함수를 각각 동명의 변수에 배정함\r\n\r\n    //          ex) let [isPending, startTransition] = useTransition();\r\n\r\n    //      2. 그렇게 배정된 변수 isPending와 함수 startTransition()을 사용해서, 실행시간 많이 잡아잡수는 특정 component의 특정 로직으로 인한 병목현상을 해소해서 웹페이지 체감 성능을 올려본다\r\n\r\n    //          - isPending\r\n    //             : react-query의 result.isLoading과 유사한 내용을 담는 변수로.. useTransition()를 통한 문제의 코드들의 실행시점이 다가옴에 따라 작업이 진행중인 경우를 true/false로 나타내는 변수\r\n    //                -> 사용법 역시 result.isLoading이 true일때, '로딩 중' 같은걸 출력하는 사례와 유사함\r\n\r\n    //          - startTransition( () => { component의 문제되는 실행코드들 })\r\n    //             : rendering이 오래 걸리는 component의 주범이 되는 코드를 rendering 시점이 아니라, 그 이후에 실행하라고 미뤄주는 의미와 기능을 가지는 함수..\r\n    //                -> 이를 통해, 먼저 처리되어야 할 기능들에 컴퓨터 자원과 시간을 먼저 투자할 수 있게 해주며, 반응속도의 체감이 좋아짐\r\n    //                   (= 단.. 결국 나중에 실행해주는 것이기에.. 정말 근본적인 성능개선이 필요하면, 걍 lazy import를 써라)\r\n\r\n    // (설명) useTransition, useDeferredValue 함수 설명을 위해 사용하는 state\r\n    let [testTransition, setTestTransition] = useState('');\r\n\r\n    // (설명) useTransition()의 사용을 위한 세팅 단계로.. 그 결과로 로딩여부 확인하는 멤버변수 ispending, 실질적으로 문제가 되는 느린 코드를 후순위로 미뤄주는 startTransition()를 구조분해\r\n    let [isPending, startTransition] = useTransition();\r\n\r\n    \r\n    // useDeferredValue(state명 or 변수명) 함수\r\n    //  : (react18 에서 등장) useTransition()와 유사하나... rendering이 오래 걸리는 component의 주범이 되는 코드가 대상이면.. 얘는 변수나, state를 대상 parmeter로 잡는 react-hooks 중 하나..\r\n    //    (= 근본적으로 하는 짓이 useTransition() 함수와 같으며, 지정된 state나 변수명에 해당하는 연산이나 render링의 처리 우선순서를 뒤로 미룸)\r\n\r\n    // (설명) useDeferredValue()의 사용을 위한 세팅 단계.. 특정 변수나 state를 중심으로 관련 내용 후순위로 미뤄줌\r\n    let state1 = useDeferredValue(testTransition)\r\n\r\n    return(\r\n        <div>\r\n            {/* (설명) useMemo()를 통해 시간이 오래걸리는 함수 useMemoExample()의 실행을 랜더링과 함꼐하여, 시간단축과 성능향상을 동시에 목적으로 하기 위해 적용 */}\r\n            {\r\n                useMemo( () => {\r\n                    return example.map((a, i) => {\r\n                        return console.log('useMemo 실행은 rendering 전이랑께?!');\r\n                    })\r\n                }, [])\r\n            }\r\n            {/* (설명) 자식 컴포넌트인 MemoChild에 props 객체를 넘겨서, 이 경우에 지속적으로 props 객체로 넘겨준 MemoChildState이 바뀌어도 재랜더링이 되는지 확인 용도 */}\r\n            <MemoChild MemoChildProps = {MemoChildState} />\r\n            <button onClick={()=>{ setMemoChildState(MemoChildState + 1) }}> + </button>\r\n            <h6>{reduxstates.user.name}의 장바구니</h6>\r\n\r\n            {/* (퀴즈 구현) 클릭하면, user 데이터의 age를 1씩 증가시켜주는 함수를 제작하고 반영해라 \r\n                  -> store.js에 구현한 increaseAge()를 참고 */}\r\n            <button onClick={() => { disPatch(increaseAge(Math.floor(Math.random() * 10))); } }>나이 : {reduxstates.user.age} </button>\r\n\r\n            <Table>\r\n                {/* (설명) thead : 표의 가로 머리 부분으로 정보를 전달 */}\r\n                <thead>\r\n                    {/* (설명) tr : 표의 행부분 생성 */}\r\n                    <tr>\r\n                        {/* (설명) th : 표의 세로 머리 부분으로 정보를 전달 */}\r\n                        <th>#</th>\r\n                        <th>상품명</th>\r\n                        <th>수량</th>\r\n                        <th>변경하기</th>\r\n                    </tr>\r\n                </thead>\r\n                {/* (설명) tbody : 표의 본문 부분 */}\r\n                <tbody>\r\n                {/* (숙제1 구현) 주어진 데이터를 Redux store 안에 보관해두고 -> 이를 Cart.js 페이지에 가져와서 데이터바인딩하여 화면에 표시해라\r\n                      -> 그렇게 cartdata라는 state의 멤버객체를 받고, 이를 map 반복문으로 처리  */\r\n                    cartdata.map(function(a, i){\r\n                        return(\r\n                                <tr cartdata={cartdata[i]} key={i}>\r\n                                    <td>{cartdata[i].id}</td>\r\n                                    <td>{cartdata[i].name}</td>\r\n                                    <td>{cartdata[i].count}</td>\r\n                                    <td>\r\n                                        <button onClick={() => {\r\n                                                        disPatch(changeName());\r\n                                                        {/* (숙제2 최종실패) 해당 state 배열의 index에 맞는 id를 setCount() 함수의 action parameter로 보내면...\r\n                                                            -> 그 id를 가진 data 객체의 index를 찾아내고, 이 index를 this역할의 state parameter를 통해 state[index].count 형식으로 원하는 녀석을 찾음..  */}\r\n                                                        disPatch(setCount(cartdata[i].id));\r\n                                                        \r\n                                                    }}>+</button>\r\n                                    </td>\r\n                                </tr>\r\n                        )\r\n                    })\r\n                }\r\n                </tbody>\r\n            </Table> \r\n            <div>\r\n                {/* (설명) useTransition()의 startTransition() 함수를 통해 시간이 오래걸리는 testTransition state에 값을 대입하는 코드의 우선순위를 후순위로 미뤄서 input창의 반응속도를 늘림 */}\r\n                <input onChange={ (e) => { \r\n                    startTransition( () => {\r\n                        setTestTransition(e.target.value) \r\n                    })\r\n                }} />\r\n\r\n                {/* (설명) useTransition()의 isPending을 통해 후순위로 미룬 시간이 오래걸리는 testTransition state에 값을 대입하는 코드가 실행 중일때, 시간벌이용 문구를 삽입함 */}\r\n                {\r\n                    isPending ? \"로딩중 기다리셈\" :\r\n                    example.map((a, i) => {\r\n                        return <div key={i}>{testTransition}</div>\r\n                    })\r\n                }\r\n\r\n                {/* (설명) useDeferredValue()를 사용하여 상단의 useTransition()과 똑같은 용도로 만든 코드 */}\r\n                <input onChange={ (e) => { \r\n                        setTestTransition(e.target.value) \r\n                }} />\r\n\r\n                {/* (설명) useDeferredValue(testTransition)를 받은 state1을 통해 상단의 useTransition()과 똑같은 용도로 만든 코드 */}\r\n                {\r\n                    example.map((a, i) => {\r\n                        return <div key={i}>{state1}</div>\r\n                    })\r\n                }\r\n\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cart;\r\n\r\n"],"names":["React","_ref","ref","bsPrefix","className","striped","bordered","borderless","hover","size","variant","responsive","props","_objectWithoutProperties","_excluded","decoratedBsPrefix","useBootstrapPrefix","classes","classNames","concat","table","_jsx","_objectSpread","responsiveClass","children","MemoChild","memo","console","log","example","Array","fill","reduxstates","useSelector","state","cartdata","user","disPatch","useDispatch","_useState","useState","_useState2","_slicedToArray","MemoChildState","setMemoChildState","_useState3","_useState4","testTransition","setTestTransition","_useTransition","useTransition","_useTransition2","isPending","startTransition","state1","useDeferredValue","_jsxs","useMemo","map","a","i","MemoChildProps","onClick","name","increaseAge","Math","floor","random","age","Table","id","count","changeName","setCount","onChange","e","target","value"],"sourceRoot":""}